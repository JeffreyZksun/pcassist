#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Assist.DataSource
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="FlashGo")]
	public partial class SharedDbTableDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTBL_Information(TBL_Information instance);
    partial void UpdateTBL_Information(TBL_Information instance);
    partial void DeleteTBL_Information(TBL_Information instance);
    #endregion
		
		public SharedDbTableDataContext() : 
				base(global::Assist.DataSource.Properties.Settings.Default.FlashGoConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public SharedDbTableDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SharedDbTableDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SharedDbTableDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SharedDbTableDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TBL_Information> TBL_Informations
		{
			get
			{
				return this.GetTable<TBL_Information>();
			}
		}
	}
	
	[Table(Name="dbo.TBL_Information")]
	public partial class TBL_Information : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string @__Key;
		
		private string _Title;
		
		private string _Link;
		
		private string _Comments;
		
		private string _Category;
		
		private int _AccessCount;
		
		private System.Nullable<bool> _Visible;
		
		private string _Added_by;
		
		private string _Modified_by;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On_KeyChanging(string value);
    partial void On_KeyChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnAccessCountChanging(int value);
    partial void OnAccessCountChanged();
    partial void OnVisibleChanging(System.Nullable<bool> value);
    partial void OnVisibleChanged();
    partial void OnAdded_byChanging(string value);
    partial void OnAdded_byChanged();
    partial void OnModified_byChanging(string value);
    partial void OnModified_byChanged();
    #endregion
		
		public TBL_Information()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Name="[_Key]", Storage="__Key", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string _Key
		{
			get
			{
				return this.@__Key;
			}
			set
			{
				if ((this.@__Key != value))
				{
					this.On_KeyChanging(value);
					this.SendPropertyChanging();
					this.@__Key = value;
					this.SendPropertyChanged("_Key");
					this.On_KeyChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Link", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="NVarChar(250)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_AccessCount", DbType="Int NOT NULL")]
		public int AccessCount
		{
			get
			{
				return this._AccessCount;
			}
			set
			{
				if ((this._AccessCount != value))
				{
					this.OnAccessCountChanging(value);
					this.SendPropertyChanging();
					this._AccessCount = value;
					this.SendPropertyChanged("AccessCount");
					this.OnAccessCountChanged();
				}
			}
		}
		
		[Column(Storage="_Visible", DbType="Bit")]
		public System.Nullable<bool> Visible
		{
			get
			{
				return this._Visible;
			}
			set
			{
				if ((this._Visible != value))
				{
					this.OnVisibleChanging(value);
					this.SendPropertyChanging();
					this._Visible = value;
					this.SendPropertyChanged("Visible");
					this.OnVisibleChanged();
				}
			}
		}
		
		[Column(Storage="_Added_by", DbType="NVarChar(30)")]
		public string Added_by
		{
			get
			{
				return this._Added_by;
			}
			set
			{
				if ((this._Added_by != value))
				{
					this.OnAdded_byChanging(value);
					this.SendPropertyChanging();
					this._Added_by = value;
					this.SendPropertyChanged("Added_by");
					this.OnAdded_byChanged();
				}
			}
		}
		
		[Column(Storage="_Modified_by", DbType="NVarChar(30)")]
		public string Modified_by
		{
			get
			{
				return this._Modified_by;
			}
			set
			{
				if ((this._Modified_by != value))
				{
					this.OnModified_byChanging(value);
					this.SendPropertyChanging();
					this._Modified_by = value;
					this.SendPropertyChanged("Modified_by");
					this.OnModified_byChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
